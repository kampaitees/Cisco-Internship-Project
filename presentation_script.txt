Slide - 2

So the motivation of using RBAC are:

It is less expensive & easy to implement. It does not allow the unauthorized access of any thirds party. The aim of RBAC is to protect
the user from external application entering into their settings. In comparison to RBAC, other protection systems such as interlocks are
reactive and are very costly to recover if once started and their prevention is less intrusive i.e it is difficult to stop them once they started.
The last motivation was that each RBAC protected setting is registered. This property of RBAC is very crucial for debugging. Using RBAC every setup
can be tracked and errors in the event or function can be detected and fixed.

Slide - 3

Now we will talk about the types of authentication which are supported by RBAC: 

We can do authentication based on the username & password where user will be allowed to enter the username and password and if they match with the one 
in the database then user will be authenticted and allowed to move forward. We can also do authentication based on Ip address of the user, where
we can look up into the table of the database owned by the RBAC. We can do based on the existing authentication token. A token is a piece of data created by server, 
and contains information to identify a particular user and token validity. The token will contain the user's information, as well as a special token code that user 
can pass to the server with every method that supports authentication, instead of passing a username and password directly. An authentication is successful if a user 
can prove to a server that he or she is a valid user by passing a security token. The service validates the security token and processes the user request. Finally we
can also do the authentication based on X.509 certificate. An X. 509 certificate is a digital certificate that uses the widely accepted international X. 509 public key
infrastructure (PKI) standard to verify that a public key belongs to the user, computer or service identity contained within the certificate. Certificate authentication
offers stronger security by mutually authenticating both the client, using a trusted party (the Certificate Authority (CA)) and the server during the TLS handshake. Because
the certificate is signed, it is only possible to connect to the real server, and centrally manage the certificates using the CA for rotation or revocation.

certificate example 

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 2 (0x2)
        Signature Algorithm: sha1WithRSAEncryption
        Issuer: O=www.freelan.org, OU=freelan
        Validity
            Not Before: Apr 27 10:54:40 2012 GMT
            Not After : Apr 25 10:54:40 2022 GMT
        Subject: OU=freelan, CN=couchbase-bob/emailAddress=bob@freelan.org
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
               
             

slide - 4

Now we will talk about the components & design of RBAC

It includes roles. Every job has a role such as, Engineer in charge, Operator of LHC, or Calibrator of Power converter etc. A user can have multiple roles, and 
any given role can be assumed by a user. For example there is a person called Role-Maker, which is another role in RBAC who give a role to the user. This person
has the right to assign a role to the user. When a new role is requested by the user, it specifies the name of the role and identifies the administrator who is
responsible for the management of the membership of the role. A role is assumed by the user when he logs into the system. Then there are access rules here, 
permissions are set which maps to the device defined in the database of device. Access rules protect the attributes of the device. These rules are the ones which
specify the which particular role can make settings. It also contains authentication token. The identity of the owner, which is digital for a limited period, is
verified by the piece of data, which is known as an authentication token. As we have discussed earlier, A token is a piece of data created by server,  and contains
information to identify a particular user and token validity.The token will contain the user's information, as well as a special token code that user can pass to the
server with every method that supports authentication, instead of passing a username & password directly. Then we also have digital keys which are combination of public
and private keys for the asymmetric cryptography for the authentication system. The clients are being identified by the authentication server based on these pair of keys.
We can also have additional features such as Single Sign on, role picker & authentication based on location based on the requirement of the system.


Slide - 5

Now we will discuss the issues in RBAC

one of issue is Explosion of role for example when users are assigned too many roles and their capabilities or responsibilities change within the company. IT managers
forget to stick to old roles or make informed decisions. The multitude of roles can often lead to security holes that are too difficult to find and close. Then we have
RBAC absolutism this happens when an organization tries to provide almost any user access using the RBAC model. It is almost impossible to test everything in a single 
model, and the number of applications is growing. Ironically, this is similar to managing access to application at the user level. Then we have Security risk tolerance
we know that RBAC is data-centric; the data are classified as related to the organizational structure, leading to the definition of roles for access control. RBAC requires
a complete understanding of the company’s security layout and granting permissions prior to installation. After installation, it is difficult to respond to changing
security threats and risks, such a dilution of the security model increases the residual risk of data leakage, which has a significant impact on finances and reputation.


Now we will discuss the challenges which might occur while deploying RBAC

Slide - 6

People do not fit well into the role; they often play half of the different roles in the organization. An individual in the organization may be responsible for three
and a half hours. Even if we use the right procedures, but we cant do anythinh with dynamic responsibilities that changes according to the needs of the organization. 
This can be a challenge we have to design in such a way that in future when the responsibilites changes we are able to update the rules which we have defined. Some 
organizations have technically implemented role-based access control, but they do not have security awareness among users to understand why. Therefore, the entire
user team will share their passwords to work faster. They don’t realize that they might unintentionally give up their account to commit a crime. At the beginning of
the RBAC deployment, we know exactly which roles need to be defined and to whom they need to be assigned. However, after a year when the organizationhas grown. More
and more people have joined the company, and in the craze to join all new people, the organization chart and job definitions have not been updated or clearly defined.
This is where RBAC is difficult to maintain and manage and  these limit the scalability of the deployment and may require a redesign to return to normal.
 
        
Now we will discuss on the performance of RBAC after being implemented. Performance is the most crucial question which has been raised by any design after it has 
been implemented. If we have implemented a system where RBAC is used and if the time taken to make a set is twice as compared to other mechanisms, then nobody
is going to use it as an implementation. The system which uses RBAC should also be scalable, i.e., it should be fast when there is a large number of access rules.

Slide - 7             

When the size of access rules were increased it does not affect much the performance of system. Similar was the result when the size of access map was increase. 3-level
verification of token has a more significant impact on the performance of the system on each request. The most crucial factor was the size of the key. Time taken by 1024
bit RSA key was 5 ms whereas by 512 bit RSA key took 0.15 ms to validate the request. These results are quite acceptable results in presently.


Slide - 8

RBAC is a non-discretionary access control mechanism that allows and promotes an organizational specific security policy’s central administration. The main of the RBAC
are to implement and express the security particular to the company policies and to streamline onerous process management of security. It belongs to the class of 
rich-policy mechanisms, and configuration of RBAC is dependent on the system of organization which makes RBAC adaptable for any structure which is organizational and has
means of business conducting. The policies which have been implemented based on RBAC are evolving as an enterprise organizational structure. Role-based security and access
control are a very dynamic area in which recent developments extend beyond the enterprise. It is becoming an essential platform in many areas related to IT security.
             

Thank you !!
             
             
             
             
